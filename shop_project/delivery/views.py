from django.conf import settings
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.db import transaction
from django.shortcuts import render, redirect, get_object_or_404
from django.utils.timezone import now
from django.urls import reverse  # –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
from .models import Order, Cart, Product, Review, OrderProduct
from .forms import CheckoutForm

import logging
import importlib
import django.template

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
importlib.import_module("delivery.templatetags.custom_filters")

logger = logging.getLogger(__name__)


@login_required
def order_list(request):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ —Å—á—ë—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è prefetch_related –¥–ª—è related-–æ–±—ä–µ–∫—Ç–æ–≤.
    """
    orders = Order.objects.filter(user=request.user).prefetch_related('orderproduct_set__product')
    order_details = []
    for order in orders:
        products = []
        for op in order.orderproduct_set.all():
            products.append({'name': op.product.name, 'quantity': op.quantity})
        order_details.append({
            'id': order.id,
            'user': order.user.username,
            'products': products,
            'status': order.get_status_display()
        })
    return render(request, 'delivery/order_list.html', {'orders': order_details})


def product_catalog(request):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    products = Product.objects.all()
    return render(request, 'delivery/catalog.html', {'products': products})


@login_required
def cart_add(request, product_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    product = get_object_or_404(Product, id=product_id)
    cart_item, created = Cart.objects.get_or_create(user=request.user, product=product)
    if not created:
        cart_item.quantity += 1
    cart_item.save()
    return redirect('cart_detail')


@login_required
def cart_detail(request):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Ñ–ª–∞–≥–∞ ¬´–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞¬ª.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è GET-–ø–∞—Ä–∞–º–µ—Ç—Ä 'updated', —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å,
    –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞).
    """
    cart_items = Cart.objects.filter(user=request.user).select_related('product')
    total_price = sum(item.product.price * item.quantity for item in cart_items)
    has_insufficient_stock = any(item.quantity > item.product.balance for item in cart_items)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GET-–ø–∞—Ä–∞–º–µ—Ç—Ä "updated"
    cart_updated = request.GET.get('updated') == '1'

    logger.debug("=== DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ ===")
    for item in cart_items:
        logger.debug(f"{item.product.name}: –í –∫–æ—Ä–∑–∏–Ω–µ {item.quantity}, –û—Å—Ç–∞—Ç–æ–∫ {item.product.balance}")
    logger.debug(f"has_insufficient_stock: {has_insufficient_stock}")

    return render(request, 'delivery/cart_detail.html', {
        'cart_items': cart_items,
        'total_price': total_price,
        'has_insufficient_stock': has_insufficient_stock,
        'cart_updated': cart_updated,
    })


@login_required
def cart_remove(request, product_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    cart_item = get_object_or_404(Cart, user=request.user, product_id=product_id)
    cart_item.delete()
    return redirect('cart_detail')


def index(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–π—Ç–∞."""
    media_url = settings.MEDIA_URL
    return render(request, 'delivery/index.html', {'media_url': media_url})


@login_required
def checkout(request):
    """
    –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    cart_items = Cart.objects.filter(user=request.user).select_related('product')
    if not cart_items.exists():
        messages.error(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return redirect('cart_detail')

    total_price = sum(item.product.price * item.quantity for item in cart_items)

    if request.method == "POST":
        form = CheckoutForm(request.POST)
        if form.is_valid():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–º –æ—Å—Ç–∞—Ç–æ–∫
            insufficient_items = []
            for item in cart_items:
                if item.quantity > item.product.balance:
                    insufficient_items.append(
                        f"{item.product.name} (–î–æ—Å—Ç—É–ø–Ω–æ: {item.product.balance}, –í –∫–æ—Ä–∑–∏–Ω–µ: {item.quantity})"
                    )
            if insufficient_items:
                logger.debug("üö® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: %s", insufficient_items)
                messages.error(request, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: {', '.join(insufficient_items)}")
                return redirect('cart_detail')

            logger.debug("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑.")
            with transaction.atomic():
                order = Order.objects.create(
                    user=request.user,
                    recipient_name=form.cleaned_data['recipient_name'],
                    phone=form.cleaned_data['phone'],
                    address=form.cleaned_data['address'],
                    comments=form.cleaned_data.get('comments', ''),
                    status='pending',
                    date_created=now()
                )

                for item in cart_items:
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–æ–∫
                    product = Product.objects.select_for_update().get(id=item.product.id)
                    if item.quantity > product.balance:
                        messages.error(request, f"–û—à–∏–±–∫–∞: {product.name} —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                        return redirect('cart_detail')
                    OrderProduct.objects.create(
                        order=order,
                        product=product,
                        quantity=item.quantity
                    )
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª.
                    item.delete()

                messages.success(request, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
                return redirect('order_list')
        else:
            logger.debug("‚ùå –§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é! –û—à–∏–±–∫–∏: %s", form.errors)
            messages.error(request, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    else:
        form = CheckoutForm()

    return render(request, 'delivery/checkout.html', {
        'form': form,
        'cart_items': cart_items,
        'total_price': total_price
    })


@login_required
def cart_update(request, product_id):
    cart_item = get_object_or_404(Cart, user=request.user, product_id=product_id)
    product = cart_item.product

    if request.method == 'POST':
        quantity_str = request.POST.get('quantity', '1')
        try:
            quantity = int(quantity_str)
        except ValueError:
            messages.error(request, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return redirect('cart_detail')

        product.refresh_from_db()
        logger.debug(
            f"DEBUG: {product.name} - –í –∫–æ—Ä–∑–∏–Ω–µ: {cart_item.quantity}, –û—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {product.balance}")

        if quantity > product.balance:
            messages.error(request,
                           f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: {product.name}. –î–æ—Å—Ç—É–ø–Ω–æ: {product.balance}, –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {quantity}")
            return redirect('cart_detail')

        if quantity > 0:
            cart_item.quantity = quantity
            cart_item.save()
            logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {product.name} - –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}, –û—Å—Ç–∞—Ç–æ–∫: {product.balance}")
        else:
            cart_item.delete()
            logger.debug(f"üóë –£–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {product.name}")

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ?updated=1
    return redirect(f"{reverse('cart_detail')}?updated=1")


def about(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ ¬´–û –Ω–∞—Å¬ª."""
    return render(request, 'delivery/about.html')


def contacts(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    return render(request, 'delivery/contacts.html')


@login_required
def profile(request):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤."""
    orders = Order.objects.filter(user=request.user).order_by('-date_created')
    return render(request, 'users/profile.html', {'orders': orders})


@login_required
def order_detail(request, order_id):
    """–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    order = get_object_or_404(Order, id=order_id, user=request.user)
    products = [
        {
            'name': item.product.name,
            'quantity': item.quantity
        }
        for item in order.orderproduct_set.select_related('product')
    ]
    return render(request, 'users/order_detail.html', {'order': order, 'products': products})


@login_required
@transaction.atomic
def repeat_order(request, order_id):
    """
    –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è—è —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.
    –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
    """
    order = get_object_or_404(Order, id=order_id, user=request.user)
    for item in order.orderproduct_set.all():
        cart_item, created = Cart.objects.get_or_create(
            user=request.user,
            product=item.product,
            defaults={'quantity': item.quantity}
        )
        if not created:
            cart_item.quantity += item.quantity
            cart_item.save()
    messages.success(request, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    return redirect('cart_detail')


@login_required
def add_review(request, product_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç."""
    product = get_object_or_404(Product, id=product_id)
    if request.method == 'POST':
        rating_str = request.POST.get('rating', '5')
        try:
            rating = int(rating_str)
        except ValueError:
            messages.error(request, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥.")
            return redirect('product_reviews', product_id=product.id)
        comment = request.POST.get('comment', '').strip()
        Review.objects.update_or_create(
            product=product, user=request.user,
            defaults={'rating': rating, 'comment': comment}
        )
        messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
        return redirect('product_reviews', product_id=product.id)
    return render(request, 'delivery/add_review.html', {'product': product})


def product_reviews(request, product_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –∫ –ø—Ä–æ–¥—É–∫—Ç—É."""
    product = get_object_or_404(Product, id=product_id)
    reviews = product.reviews.all()
    return render(request, 'delivery/product_reviews.html', {'product': product, 'reviews': reviews})


def product_detail(request, product_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ."""
    product = get_object_or_404(Product, id=product_id)
    reviews = product.reviews.all()
    return render(request, 'delivery/product_detail.html', {'product': product, 'reviews': reviews})
